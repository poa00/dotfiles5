# Prefix commands with GIT_TRACE=1 to debug performance.

[user]
    email = seth@eseth.com
    name = Seth House

[push]
    default = current

[alias]
    b = branch -vv --sort=-committerdate
    ap = add --patch
    ca = commit --amend --no-edit
    cm = commit --amend -o
    ci = commit
    cr = reset HEAD~1
    co = checkout
    d = diff --summary --stat --patch
    ds = d --cached
    ff = merge --ff-only
    m = merge --no-ff
    mt = mergetool
    p = push
    pushnoci = push -o ci.skip
    pg = pagediffs
    short = rev-parse --short
    ref = rev-parse --symbolic-full-name
    sh = show --summary --stat --pretty=fuller --patch
    st = status -s -b
    sti = status -s -b --ignored
    stat = diff --stat
    sl = stash list --name-status --pretty='format:%gd [%ar]: %s'
    ss = "!_() { git stash show -p stash@{${1:-0}}; };_"
    sd = "!_() { git stash drop stash@{${1:-0}}; };_"
    which = "!_() { git config --global --get alias.$1; };_"
    churn = !git log --all -M -C --name-only --format='format:' "$@" \
        | grep . | sort | uniq -c | sort -n -r
    whoami = !git var GIT_COMMITTER_IDENT | sed 's/>.*/>/'
    lasttag = describe --abbrev=0

    # Output all the changes since the most recent tag as a Markdown list:
    # git changelog
    # git changelog HEAD~5...
    changelog = "!_() { \
        range=${1:-$(git lasttag)...HEAD}; \
        printf 'Changes since %s\n\n' $range; \
        git --no-pager log --reverse --no-merges --oneline \
            --pretty=format:'- %h %s' \
            $range; \
        printf '\n'; \
    };_"

    # Fetch all or one remote:
    #   git f
    #   git f upstream
    f = "!sh -c 'git fetch --tags ${1:-\"--all\"}' -"

    # Interactive rebase against upstream HEAD or ref:
    #   git r
    #   git r HEAD~10
    r = "!sh -c 'git rebase --autosquash -i ${1:-\"@{u}\"}' -"

    # Rebase against upstream HEAD or ref:
    #   git r
    #   git r HEAD~10
    rup = "!sh -c 'git rebase ${1:-\"@{u}\"}' -"

    # Hard reset to upstream or ref:
    #   git re
    #   git rh HEAD~1
    rh = "!sh -c 'git reset --hard ${1:-\"@{u}\"}' -"

    # Fast-forward merge upstream or ref:
    #   git up
    #   git up myremote/mybranch
    up = "!sh -c 'git merge --ff-only ${1:-\"@{u}\"}' -"

    # Make a stub commit with file and file contents. Useful for demoing.
    stub = "!sh -c 'echo $1 > $1; git add $1; git commit -m Add-$1' -"

    # Cherry-pick a commit directly into the working directory.
    cherry-patch = "!sh -c 'git show \"${1:?Missing revision}\" | git apply' -"

    # Use a fuzzy-finder to find a SHA to use for a fixup commit.
    fixup = !git l @{u}.. | fzy | awk '{ print $1 }' | xargs -I{} git ci --fixup={}

    # Perform a merge in-memory and output if conflicts are found (dry-run):
    #   git mergetest otherbranch
    mergetest = "!_() { \
        git merge-tree \
            $(git merge-base ${1:?Missing branch} HEAD) \
            ${1:?Missing branch} \
            HEAD \
        | awk '/<<<<<<</ { exit 1 }'; \
    }; _"

    l = log --format=format:'%C(auto)%h%d%C(reset) %s %C(bold blue)(%an, %ar)%C(reset)'
    ll = log --stat --decorate --abbrev-commit --date=relative
    lll = log -p --stat --decorate --color-moved --pretty=fuller
    lt = log --topo-order --format=format:'%C(auto)%h%d%C(reset) %s %C(bold blue)(%an, %ar)%C(reset)'
    lm = log --oneline --decorate --topo-order --merges --ancestry-path

    rl = reflog --date=relative
    rll = reflog --date=relative --stat
    rlll = reflog --date=relative -p --stat --color-moved

    # Show the Git log and automatically shorten & search for a SHA:
    #   git lf deb8dff8d8c1ed8acb7d7a2ec1158e7db136aab3
    lf = "!sh -c 'GIT_PAGER=\"$PAGER -p $(git short $1)\" git l' -"
    ltf = "!sh -c 'GIT_PAGER=\"$PAGER -p $(git short $1)\" git lt' -"

    # Fuzzy-find any Git ranges in the tmux scrollback then re-output as an
    # in-progress git log command.
    # Usage: git fetch && git frefs
    frefs = "!scrollback | match-git-range | uniq | fzy | tr -d \\\\n \
        | xargs -I{} tmux send git Space l Space {} Space"

    # http://tbaggery.com/2011/08/08/effortless-ctags-with-git.html
    ctags = !.git/hooks/ctags

    # Open all modified or staged files into Vim's quickfix list.
    # bd1 deletes the initial "[No Name]" buffer since we're using :set hidden
    # E.g.: git editm; git edits
    editm = "!zsh -c '$EDITOR +bd1 -q <(git diff -p -U0 --diff-filter=AM \
        | diff-to-quickfix)'"
    edits = "!zsh -c '$EDITOR +bd1 -q <(git diff --cached -p -U0 --diff-filter=AM \
        | diff-to-quickfix)'"

    # Open all files changed within either a single commit, or a commit range
    # into Vim's quickfix list. Defaults to HEAD. Useful for stepping through
    # changes in one or more commits, or quickly picking back up where you left
    # off after a WIP commit.
    # E.g.: git editc
    # E.g.: git editc HEAD~3
    # E.g.: git editc @{u}..
    editc = "!zsh -c ' \
        [[ \"$1\" =~ \"\\.\\.\" ]] && dcmd=diff || dcmd=diff-tree ; \
        $EDITOR +bd1 -q <(git $dcmd -p -U0 --diff-filter=AM -r \
        \"${1:-HEAD}\" \
        | diff-to-quickfix)' -"

    # Alias to make an archive with a prefix set to the name of the repo.
    # git tar <ref> (defaults HEAD)
    tar = "!zsh -c 'REF=${1:-HEAD}; \
        BASE=$(basename $(git rev-parse --show-toplevel)); \
        git archive --prefix=${BASE}/ -o ${BASE}-$(git describe ${REF}).tar.gz ${REF}' -"

    # Merge a GitHub pull request into the current branch.
    # Usage: git preq <preq>
    # Usage: git preq <preq> [<remote>]
    preq = "!sh -c 'git pull --no-ff ${2:-upstream} refs/pull/${1:?Missing preq}/head' -"
    # Same thing but for GitLab:
    mreq = "!sh -c 'git pull --no-ff ${2:-origin} refs/merge-requests/${1:?Missing preq}/head' -"

    # Make a local branch from a remote branch somewhere on GitHub.
    # Usage git ghbranch username reponame remotebranchname localbranchname
    ghbranch = "!sh -c 'git fetch git@github.com:${1:?Missing user}/\
        ${2:?Missing repo}.git \
        ${3:?Missing remote branch}:${4:?Missing local branch}' -"

    # Configure local clone to also make local refs for all GitHub pull
    # requests for the specified remote
    # Usage: git addrefspr upstream; git fetch upstream; git show upstream/pr/13
    addrefspr = "!sh -c 'git config --add \
        remote.${1:?Missing remote}.fetch \"+refs/pull/*/head:refs/remotes/$1/pr/*\"' -"

[commit]
    verbose = 2

[core]
    excludesfile = ~/.gitignore

[color]
    ui = auto

[init]
    # Use full path to dotfiles instead of the path to the symlinks in my
    # homedir. This causes the target template files to get copied into new
    # repos rather than copying the symlinks to those template files.
    templatedir = ~/src/dotfiles/.git_template

[pager]
    # Don't paginate the oneline log output if less than one page.
    l = $PAGER -F
    lt = $PAGER -F
    b = $PAGER -F
    branch = $PAGER -F
    sl = $PAGER -F
    stat = $PAGER -F
    rl = $PAGER -F

[merge]
    tool = diffconflicts

[mergetool]
    keepBackup = false

[mergetool "vimdiff1"]
    hideResolved = true

[mergetool "diffconflicts"]
    cmd = vim -c DiffConflicts \"$MERGED\" \"$BASE\" \"$LOCAL\" \"$REMOTE\"
    trustExitCode = true
    hideResolved = false

[diff]
    tool = vimdiff
    colorMoved = true

# If Git::LoadCPAN is not packaged for your distro:
# export PERL5LIB=/path/to/git/clone/perl
# [sendemail]
#     smtpencryption = tls
#     smtpserver = server
#     smtpuser = user
#     smtpserverport = port

[include]
    path = ~/.gitemailconfig
    path = ~/.gitconfig-customize
