#!/usr/bin/env sh
# Show a summary of the commits, authors, and files in a Git repo
#
# Requires GNU awk.
#
# Omit file stats with `-f` for a substantially faster processing time for
# large repositories.
#
# Usage:
#
#     git summary
#     git summary -f

show_files=1
while getopts hf opt; do
    case $opt in
    h) awk 'NR == 1 { next } /^$/ { exit } { print substr($0, 3) }' "$0"
       exit ;;
    f) unset show_files;;
    esac
done
shift $(( OPTIND - 1 ))

test -t 1 && show_progress=1

# %x09 is a tab character
git log --no-renames ${show_files:+--numstat} \
        --format='XXX%x09%h%x09%an%x09%ae%x09%cn%x09%ce%x09%aD%x09%cr' \
    | gawk -v show_progress="$show_progress" '
    function alen(a, i, c) { for (i in a) c += 1; return c; }
    function isnum(x){ return (x == x + 0) }
    function max(n, m) { return n >= m ? n : m; }

    BEGIN { FS="\t"; OFS="\t" }

    /^$/ { next }

    /^XXX/ {
        sha=$2
        author=$3 " <" $4 ">"
        committer=$5 " <" $6 ">"
        reldate=$8

        split($7, cal_segs, " ")

        weekday=cal_segs[1]
        weekday=substr(weekday, 1, length(weekday) - 1)

        day=cal_segs[2]
        month=cal_segs[3]
        year=cal_segs[4]

        hour=cal_segs[5]
        hour=substr(hour, 1, index(hour, ":") - 1)

        tz=cal_segs[6]

        auth_date=month ", " day " " year

        commit_count += 1
        author_list[author] += 1
        committer_list[committer] += 1
        active_days[auth_date] = 1
        top_hours[hour] += 1
        top_weekdays[weekday] += 1

        if (show_progress) {
            printf("\033[2K\033[1GCommits processed: %s", commit_count)
        }
    }

    NR == 1 { last_date=auth_date; last_reldate=reldate; last_sha=sha }

    !/^XXX/ {
        added=isnum($1) ? $1 : 0
        removed=isnum($2) ? $2 : 0
        filename=$3

        file_list[filename] += 1
        lines_changed_count += added - removed
    }

    END {
        # No Git output? (Probably an error.)
        if (NR == 0) { exit 1 }

        # Iterate over arrays below using the same sort direction.
        PROCINFO["sorted_in"] = "@val_num_desc"

        if (show_progress) { printf("\033[2K\033[1G") }

        commit_str = "%s:\t%s - %s (%s)\n"
        printf(commit_str commit_str "\n",
            "First Commit", sha, auth_date, reldate,
            "Last Commit", last_sha, last_date, last_reldate)

        file_list_count = alen(file_list)
        author_list_count = alen(author_list)
        committer_list_count = alen(committer_list)
        active_days_count = alen(active_days)

        # %valposition$*widthposition$s
        printf( \
        "%1$*2$s" "%4$*5$s" "%7$*8$s" "%10$*11$s" "%13$*14$s" "%16$*17$s\n"\
        "%3$*2$s" "%6$*5$s" "%9$*8$s" "%12$*11$s" "%15$*14$s" "%18$*17$s\n",

            "Commits",
            max(length("Commits"), length(commit_count)) + 2,
            commit_count,

            "Files",
            max(length("Files"), length(file_list_count)) + 2,
            file_list_count == 0 ? "-" : file_list_count,

            "Lines", \
            max(length("Lines"), length(lines_changed_count)) + 2,
            lines_changed_count == 0 ? "-" : lines_changed_count,

            "Authors",
            max(length("Authors"), length(author_list_count)) + 2,
            author_list_count,

            "Committers",
            max(length("Committers"), length(committer_list_count)) + 2,
            committer_list_count,

            "Active Days",
            max(length("Active Days"), length(active_days_count)) + 2,
            active_days_count)

        printf("\nTop days:\n\n")
        for (h in top_weekdays) printf("%5s", h)
        print ""
        for (h in top_weekdays) {
            printf("%4.0f%%", (top_weekdays[h] / commit_count) * 100 )
        }
        print ""

        printf("\nTop hours:\n\n")
        count = 0
        for (i in top_hours) {
            printf("%*s", 4, i)
            count += 1; if (count > 8) break
        }
        print ""
        count = 0
        for (i in top_hours) {
            printf("%3.0f%%", (top_hours[i] / commit_count) * 100 )
            count += 1; if (count > 8) break
        }
        print ""

        printf("\nTop authors:\n\n")
        count = 0
        for (j in author_list) {
            printf("%s\t%*.1f%%\t%s\n",
                author_list[j],
                5, (author_list[j] / commit_count) * 100,
                j)
            count += 1; if (count > 4) break
        }

        printf("\nTop committers:\n\n")
        count = 0
        for (l in committer_list) {
            printf("%s\t%*.1f%%\t%s\n",
                committer_list[l],
                5, (committer_list[l] / commit_count) * 100,
                l)
            count += 1; if (count > 4) break
        }

        if (alen(file_list)) {
            printf("\nTop files:\n\n")
            count = 0
            for (k in file_list) {
                print file_list[k], k
                count += 1; if (count > 4) break
            }
        }
    }
    '
