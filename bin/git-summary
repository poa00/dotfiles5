#!/usr/bin/env sh
# Show a summary of the commits, authors, and files in a Git repo
#
# Omit file stats with `-f` for a substantially faster processing time for
# large repositories.
#
# Usage:
#
#     git summary
#     git summary -f

show_files=1
while getopts hf opt; do
    case $opt in
    h) awk 'NR == 1 { next } /^$/ { exit } { print substr($0, 3) }' "$0"
       exit ;;
    f) unset show_files;;
    esac
done
shift $(( OPTIND - 1 ))

test -t 1 && show_progress=1

# %x09 is a tab character
git log --no-renames ${show_files:+--numstat} \
        --format='XXX%x09%h%x09%an%x09%ae%x09%cn%x09%ce%x09%aD%x09%cr' \
    | awk -v show_progress="$show_progress" '
    function alen(a, i, c) { for (i in a) c += 1; return c; }
    function isnum(x){ return (x == x + 0) }
    function get(var, def) { return var == 0 || var == "" ? def : var }

    BEGIN { FS="\t"; OFS="\t" }

    /^$/ { next }

    /^XXX/ {
        sha=$2
        author=$3 " <" $4 ">"
        committer=$5 " <" $6 ">"
        reldate=$8

        split($7, cal_segs, " ")

        weekday=cal_segs[1]
        weekday=substr(weekday, 1, length(weekday) - 1)

        day=cal_segs[2]
        month=cal_segs[3]
        year=cal_segs[4]

        hour=cal_segs[5]
        hour=substr(hour, 1, index(hour, ":") - 1)

        tz=cal_segs[6]

        auth_date=month ", " day " " year

        commit_count += 1
        author_list[author] += 1
        committer_list[committer] += 1
        active_days[auth_date] = 1
        top_hours[hour] += 1
        top_weekdays[weekday] += 1

        if (show_progress) {
            printf("\033[2K\033[1GCommits processed: %s", commit_count)
        }
    }

    NR == 1 { last_date=auth_date; last_reldate=reldate; last_sha=sha }

    !/^XXX/ {
        added=isnum($1) ? $1 : 0
        removed=isnum($2) ? $2 : 0
        filename=$3

        file_list[filename] += 1
        lines_changed_count += added - removed
    }

    END {
        # No Git output? (Probably an error.)
        if (NR == 0) { exit 1 }

        if (show_progress) { printf("\033[2K\033[1G") }

        col_cmd =  "git column --mode=row --padding=4 --width=80"

        commit_str = "%s:\t%s - %s (%s)\n"
        printf(commit_str commit_str "\n",
            "First Commit", sha, auth_date, reldate,
            "Last Commit", last_sha, last_date, last_reldate)

        cmd = col_cmd
        printf( \
            "Commits: " commit_count "\n"\
            "Files: " get(alen(file_list), "-") "\n"\
            "Lines: " get(lines_changed_count, "-") "\n"\
            "Authors: " alen(author_list) "\n"\
            "Committers: " alen(committer_list) "\n"\
            "Active Days: " alen(active_days) "\n") | cmd
        close(cmd)

        cmd = "sort -n -r | cut -f2,3 |" col_cmd
        printf("\nTop days:\n\n")
        for (h in top_weekdays) {
            printf("%s\t%s: %.0f%%\n",
                top_weekdays[h],
                h,
                (top_weekdays[h] / commit_count) * 100) | cmd
        }
        close(cmd)

        cmd = "sort -n -r | head -12 | cut -f2,3 |" col_cmd
        printf("\nTop hours:\n\n")
        for (i in top_hours) {
            printf("%s\t%s:00: %.0f%%\n",
                top_hours[i],
                i,
                (top_hours[i] / commit_count) * 100) | cmd
        }
        close(cmd)

        cmd = "sort -n -r | head -5"
        printf("\nTop authors:\n\n")
        for (j in author_list) {
            printf("%s\t%5.1f%%\t%s\n",
                author_list[j],
                (author_list[j] / commit_count) * 100,
                j) | cmd
        }
        close(cmd)

        cmd = "sort -n -r | head -5"
        printf("\nTop committers:\n\n")
        for (l in committer_list) {
            printf("%s\t%5.1f%%\t%s\n",
                committer_list[l],
                (committer_list[l] / commit_count) * 100,
                l) | cmd
        }
        close(cmd)

        if (alen(file_list)) {
            cmd = "sort -n -r | head -5"
            printf("\nTop files:\n\n")
            for (k in file_list) print file_list[k], k | cmd
            close(cmd)
        }
    }
    '
