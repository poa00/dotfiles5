#!/usr/bin/env sh
# Quickly create and edit a new shell script, already marked as executable
#
# Usage:
#
#   new-sh foo.sh
#   new-sh foo.py python

while getopts h opt; do
    case $opt in
    h) awk 'NR == 1 { next } /^$/ { exit } { print substr($0, 3) }' "$0"
       exit ;;
    esac
done
shift $(( OPTIND - 1 ))

script="${1:?Script name required.}"
lang=${2:-sh}

if [ -e "$script" ]; then
    printf 'Script "%s" already exists.\n' "$script" 1>&2
    exit 1
fi

printf "#!/usr/bin/env $lang\n" > "$script"
chmod +x "$script"

test "$lang" = 'sh' && cat >> "$script" <<-'EOS'
# Short Description
#
# Longer Description

NAME=$(basename "$0")
VERSION='0.0.1'
TEMP=$(printf 'mkstemp(template)\n' |
    m4 -D template="${TMPDIR:-/tmp}/${NAME}XXXXXX")

help () {
    # Extract contiguous lines of comments in a function as help text

    awk -v cmd="${1:?'Command name required.'}" -v NAME="$NAME" '
    $0 ~ "^" cmd "\\s*\\(\\)\\s*{" { is_found=1; next }
    is_found && !NF { exit }
    is_found { gsub(/^\s*#\s?/, ""); gsub(/NAME/, NAME); print; }
    ' "$0"
}

_all_funcs () {
    # List all public function names in the current file

    awk '$1 !~ /^_/ && /^[a-zA-Z0-9_]+\s*\(\)/ { print $1 }' "$0"
}

_main () {
    # ## Usage
    #
    # `NAME [<flags>] (command [<arg>, <name=value>...])`
    #
    #     NAME -h              # Short, usage help text.
    #     NAME help command    # Command-specific help text.
    #     NAME command         # Run a command without and with args:
    #     NAME command foo bar baz=Baz qux='Qux arg here'
    #
    # Flag | Description
    # ---- | -----------
    # -V   | Show version.
    # -h   | Show this screen.
    # -x   | Enable xtrace debug logging.
    #
    # Flags _must_ be the first argument to `NAME`, before `command`.

    local opt
    local OPTARG
    local OPTIND

    local cmd
    local ret

    trap '
        excode=$?; trap - EXIT;
        rm -rf -- '"$TEMP"'
        exit $excode
    ' INT TERM EXIT

    while getopts Vhvx opt; do
        case $opt in
        V) printf 'Version: %s\n' $VERSION
           exit;;
        h) help _main
           printf '\nAvailable commands:\n\n'
           _all_funcs | sort
           printf '\n'
           exit;;
        x) set -x;;
        esac
    done
    shift $(( OPTIND - 1 ))

    cmd="${1:?"No command given.

$($0 -h)"}"

    shift
    "$cmd" "$@"
    ret=$?

    exit $ret
}

_main "$@"
EOS

${EDITOR:-vi} -c ':1' "$script"
