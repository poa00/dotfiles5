#!/usr/bin/env sh
# A lightweight job queue using tail and xargs

NAME=$(basename "$0")
QUEUE_DIR="${PWD}/__queue_jobs"
QUEUE="${QUEUE_DIR}/queue"
MAXJOBS=1

help () {
    # Extract contiguous lines of comments in a function as help text

    awk -v cmd="${1:?'Command name required.'}" -v NAME="$NAME" '
    $0 ~ "^" cmd "\\s*\\(\\)\\s*{" { is_found=1; next }
    is_found && !NF { exit }
    is_found { gsub(/^\s*#\s?/, ""); gsub(/NAME/, NAME); print; }
    ' "$0"
}

_main () {
    # ## Usage
    #
    # `NAME [<flags>] [command to enqueue...]`
    #
    # Flag | Description
    # ---- | -----------
    # -h   | Show this screen.
    # -x   | Enable xtrace debug logging.
    # -n   | Delete the queue file before starting.
    # -P   | Max number of jobs to run in parallel.
    #
    # Flags _must_ be the first argument to `NAME`.
    #
    # ### Examples:
    #
    # Start processing the queue, three concurrent jobs at a time:
    #
    #     NAME -P3
    #
    # Add new jobs to the queue:
    #
    #     NAME 'sleep 5 && echo done'
    #     NAME sleep 5 \&\& echo done
    #     NAME echo hi
    #     NAME curl -L -C - 'http://example.com/somedownload.tar.gz' -o myfile.tar.gz

    local opt
    local OPTARG
    local OPTIND

    while getopts hP:nx opt; do
        case $opt in
        h) help _main
           printf '\n'
           exit;;
        P) MAXJOBS="$OPTARG";;
        n) rm -rf "$QUEUE_DIR";;
        x) set -x;;
        esac
    done
    shift $(( OPTIND - 1 ))

    mkdir -p -m 700 "$QUEUE_DIR"
    touch "$QUEUE"

    if [ $# -eq 0 ]; then
        printf 'Watching queue for jobs...\n\n'

        tail -z -n+0 -f "$QUEUE" \
            | xargs -0 -r -I{} -P "$MAXJOBS" sh -c \
                'echo Start $$
                printf '\''%s\n'\'' "{}" > '"$QUEUE_DIR"'/job-$$.job
                {} 1>'"$QUEUE_DIR"'/job-$$.out 2>'"$QUEUE_DIR"'/job-$$.err
                echo Done $$ $?' \
            | awk '
                function alen(a, i, c) { for (i in a) c += 1; return c; }
                /^Start/ { jobs[$2] = "X" }
                /^Done/ { jobs[$2] = $3 }
                {
                    printf("\033[s") # save pos
                    printf("\033[0J") # clear to end of screen
                    printf("\033[1E") # next line
                    printf("%-8s%-15s%-15s\n",
                        "PID", "Is running", "Exit code")
                    for (i in jobs) {
                        printf("%-8s%-15s%-15s\n",
                        i,
                        jobs[i] == "X" ? "X" : "",
                        jobs[i] == "X" ? "" : jobs[i])
                    }
                    printf("\nTotal jobs: %s\n", alen(jobs))
                    printf("\033[u") # restore pos
                }
            '
    else
        # Try to mimic Bash's printf '%q':
        printf '%s\0' "$*" \
            | sed \
                -e "s/'/'\\\\''/g" \
                -e 's/[|&;<>()$`\\"\*\?\[#~=%\t\n]/\\&/g' \
            >> "$QUEUE"
    fi
}

_main "$@"
