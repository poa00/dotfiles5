#!/usr/bin/env zsh
# (filtering find) - A wrapper around find to ignore noise directories
#
# Obtains files/directories to ignore from reading the following files:
#
# $HOME/.ffind
# $PWD/.ffind
# $(git rev-parse --absolute-git-dir)/../.ffind
#
# Format (comments use # prefix):
#
# -path *.git
# -path *node_modules
# -name *.pyc

local -a prune

function read_configs() {
    local git_dir
    local rcfile="ffind"
    local base_opts="${HOME}/.${rcfile}"
    local proj_opts="${PWD}/.${rcfile}"
    local git_opts

    if [[ -r "$base_opts" ]] ; then
        prune+=( ${(f)"$(< "$base_opts")"} )
    fi

    if [[ -r "$proj_opts" ]] && [[ $PWD != $HOME ]] ; then
        prune+=( ${${(f)"$(< "$proj_opts")"}:#[#]*} )
    fi

    if (( $+commands[git] )); then
        git_dir=$(git rev-parse --absolute-git-dir 2>/dev/null)
        if (( ! $? )); then
            git_opts="${git_dir}/../.${rcfile}"
            if [[ -r "$git_opts" ]] && [[ ! -r "$proj_opts" ]] ; then
                prune+=( ${(f)"$(< "$git_opts")"} )
            fi
        fi
    fi
}

main() {
    read_configs
    prune=( ${(M)prune:#-*} ) # Remove lines that don't start with a dash.

    local help="Usage: ffind ./somepath [<find args>]

    ffind .
    ffind . -name '*.py'
    "

    # TODO: look into parsing find args that must come before the expression.
    local spath="$1"
    shift 1

    [[ -n "$spath" ]] || { printf '%s\n' "$help"; return 1; }

    if (( ${@[(I)-print*]} == 0 )) && (( ${@[(I)-exec*]} == 0 )); then
        local add_print=1;
    fi

    # set -x
    find "$spath" \
        '(' ${(z)${(j: -o :)prune}} ')' -prune \
        -o "$@" \
        ${add_print+-print}
}

main "$@"
