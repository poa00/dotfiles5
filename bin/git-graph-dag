#!/usr/bin/env sh
# Draw a graphviz diagram of the Git DAG
#
# Labels consist of the short SHA1 and any refs.
# Unreachable commits (ignoring the reflog) will be drawn with dashed lines.
#
# Largely stolen from https://git.wiki.kernel.org/index.php/ExampleScripts
#
# Accepts any range or arguments that git rev-list accepts.
#
# The -c flag will also output the commit message. These should probably be
# extremely short for it to not make the graph awful.

main() {
    while getopts ch opt; do
        case $opt in
        c) show_msg=1;;
        h) show_help=1;;
        esac
    done
    shift $(( OPTIND - 1 ))

    if [[ $# -eq 0 ]] || [[ -n "$show_help" ]] ; then
        printf 'Usage: git graph-dag HEAD~10.. | dot -Tpng | display -antialias
Usage: git graph-dag HEAD~10.. | dot -Tpng | open -a Preview.app -f\n'
        exit 1
    fi

    {
        git fsck --unreachable --no-reflogs --no-progress \
            | awk '/commit/ { print $3 }'

        printf 'XXX\n'

        git rev-list --no-commit-header --pretty=format:'%H|%h|%p|%D|%f' "$@" ;
    } |
    awk -v show_msg="$show_msg" '

    BEGIN {
        FS="|"
        print "digraph lattice {"
    }

    /^XXX$/ { revlist = 1; next }

    !revlist { unreachable[$1] = 1 }

    revlist {
        hashfull = $1
        hash = $2
        split($3, parents, " ")
        refs = $4
        msg = $5

        sub(" -> ", " -\\&gt; ", refs)
        unreachable[hashfull] == 1 ? isunr = 1 : isunr = 0

        for (p in parents) {
            printf("x%s -> x%s\n", hash, parents[p])
        }

        printf("x%s [shape=Mrecord, style=%s, label=<%s%s%s>]\n",
            hash, \
            isunr == 1 ? "dashed" : "filled", \
            "<b>" hash "</b>",
            show_msg == 1 ? " <font color=\"gray20\">" msg "</font>" : "", \
            refs == "" ? "" : "<br/><font color=\"gray20\" point-size=\"10.0\">" refs "</font>")
    }

    END { printf("}\n") }
    '
}

main "$@"
