#!/usr/bin/env sh
# Run `git fetch` on all repos under the current dir in parallel
#
# Usage:
#     fetchall
#
# With ssh pipelining:
#     fetchall "git@github.com"

SSH_URI="$1"
REPO_CACHE="${TMPDIR:-/tmp}/_fetchall.txt"

trap '
    excode=$?; trap - EXIT;
    __ssh_fetchall
    __fetchall
    exit $excode
' INT TERM EXIT

_wait_for_ssh () {
    # Block until a multiplexed ssh connection is ready
    #
    # Useful for making a single ssh connection that can be reused for many ssh
    # operations. This requires ControlMaster and ControlPath to be configured
    # in your ~/.ssh/config file.
    #
    # Usage:
    #   SSH="me@example.com"
    #   trap 'ssh -O exit '${SSH} SIGINT SIGTERM EXIT
    #   ssh -N ${SSH} &
    #   _wait_for_ssh ${SSH}
    #   ...use multiplexed ssh connection here...

    local ssh="${1?:ssh hostname required}"

    printf 'Connecting to "%s".\n' "$ssh"
    while ! ssh -O check ${ssh} 1>/dev/null 2>/dev/null true; do
        printf '.' ; sleep 0.5;
    done
    printf '\nConnected!\n'
}

fetchall () {
    find . -type d -name .git -print0 \
        | tee "$REPO_CACHE" \
        | xargs -t -r -0 -P5 -I@ git --git-dir=@ fetch -a

    < "$REPO_CACHE" xargs -0 -n1 \
        | wc -l \
        | xargs printf 'Fetched upstream changes from %s repos.\n'
}
__fetchall () {
    rm -f "$REPO_CACHE"
}

ssh_fetchall () {
    if [ -z "$SSH_URI" ]; then
        printf 'SSH connection string required.\n' 1>&2
        exit 1
    fi

    ssh -N ${SSH_URI} &
    _wait_for_ssh ${SSH_URI}

    # Kick off a ton of parallel fetch operations
    time fetchall
}
__ssh_fetchall () {
    # Exit connection when done

    if [ -n "$SSH_URI" ]; then
        ssh -O exit "$SSH_URI"
    fi
}

main() {
    if [ "$#" -gt 0 ]; then
        ssh_fetchall "$@"
    else
        fetchall
    fi
}

main "$@"
