#!/usr/bin/env sh
# Wrap curl to conditionally open headers, timing info, and response in a pager
#
# Passes any arguments through to curl.
#
# The pager will open two documents. The first is headers and timing, the
# second is the response body. If used in a pipe, no pager will be started and
# headers and timing will be send to stdout instead.
#
# Preferentially requests JSON responses (can be overridden). Use the new
# `--json` flag to send JSON requests. Formats JSON responses with jq.
#
# Tip: Create config files for commonly accessed hosts, such as authentication
# creds, SSL options, and even a hostname alias:
#
#     # E.g.: curl -K /path/to/foo.cfg foohost/path/to/resource
#     oauth2-bearer = asdfjkl
#     proto-default = https
#     insecure
#     connect-to = foohost::foohost.example.com:
#     header = "Host: foohost.example.com"
#
# Usage:
#
#     c https://example.com
#     c https://api.github.com/users
#     c https://api.github.com/users > response.json
#     c https://api.github.com/users | jq '.[] | .login'

NAME=$(basename "$0")
TEMP="${TMPDIR-/tmp}/${NAME}.${$}.$(awk \
    'BEGIN {srand(); printf "%d\n", rand() * 10^10}')"

while getopts :h opt; do
    case $opt in
    h)
        awk 'NR == 1 {next} /^$/ {exit} {print substr($0, 3)}' "$0"
        printf '\n\n'
        curl -h
        exit;;
    esac
done
shift $(( OPTIND - 1 ))

trap '
    excode=$?; trap - EXIT;
    rm -rf -- '"$TEMP"'
    exit $excode
' INT TERM EXIT

mkdir -m 700 "$TEMP"
if [ $? -ne 0 ]; then
    printf 'Error creating temp directory.\n' 1>&2
    exit 1
fi

crlf=$(printf '\r\n')
headers="${TEMP}/headers"
timing="${TEMP}/timing"
metainfo="${TEMP}/metainfo"
body="${TEMP}/body"

if [ -t 1 ]; then
    is_term=1
fi

curl -sS -D "$headers" -o "$body" -w '----------
namelookup:     %{time_namelookup}
connect:        %{time_connect}
appconnect:     %{time_appconnect}
pretransfer:    %{time_pretransfer}
redirect:       %{time_redirect}
starttransfer:  %{time_starttransfer}
total:          %{time_total}
----------
' -H 'Accept: application/json;q=0.9, */*;q=0.1' "$@" > "$timing"

! grep -qi '^content-type: .*application\/json' "$headers"
is_json=$?

{
    if [ "$is_json" -eq 1 ]; then
        jq ${is_term+-C} . "$body"
    else
        cat "$body"
    fi;
} | {
    if [ -n "$is_term" ]; then
        cat "$headers" "$timing" > "$metainfo"
        $PAGER -RF "$metainfo" -
    else
        cat "$headers" "$timing" 1>&2
        cat
    fi;
}
